# Generated by Django 5.2.4 on 2025-08-12 10:20

from django.db import migrations, models


from datetime import time

def migrate_timeslots_data(apps, schema_editor):
    Trainer = apps.get_model('trainersdb', 'Trainer')
    TimeSlot = apps.get_model('trainersdb', 'TimeSlot')
    Batch = apps.get_model('batchdb', 'Batch')

    # Migrate Trainer timing_slots
    for trainer in Trainer.objects.all():
        if isinstance(trainer.timing_slots_old, list):
            for slot_data in trainer.timing_slots_old:
                if isinstance(slot_data, dict):
                    start_time_str = slot_data.get('start_time')
                    end_time_str = slot_data.get('end_time')

                    if start_time_str and end_time_str:
                        try:
                            start_time = time.fromisoformat(start_time_str)
                            end_time = time.fromisoformat(end_time_str)
                            
                            timeslot, _ = TimeSlot.objects.get_or_create(
                                start_time=start_time,
                                end_time=end_time
                            )
                            trainer.timing_slots.add(timeslot)
                        except (ValueError, TypeError):
                            pass
            trainer.save()

    # Migrate Batch time_slot
    for batch in Batch.objects.all():
        if isinstance(batch.time_slot_old, dict):
            start_time_str = batch.time_slot_old.get('start_time')
            end_time_str = batch.time_slot_old.get('end_time')

            if start_time_str and end_time_str:
                try:
                    start_time = time.fromisoformat(start_time_str)
                    end_time = time.fromisoformat(end_time_str)
                    
                    timeslot, _ = TimeSlot.objects.get_or_create(
                        start_time=start_time,
                        end_time=end_time
                    )
                    batch.time_slot = timeslot
                    batch.save()
                except (ValueError, TypeError):
                    pass

class Migration(migrations.Migration):

    dependencies = [
        ('trainersdb', '0007_trainer_commercials_trainer_demo_link_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='trainer',
            name='timing_slots_old',
            field=models.JSONField(blank=True, default=list, null=True),
        ),
        migrations.RemoveField(
            model_name='trainer',
            name='timing_slots',
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
            ],
            options={
                'unique_together': {('start_time', 'end_time')},
            },
        ),
        migrations.AddField(
            model_name='trainer',
            name='timing_slots',
            field=models.ManyToManyField(blank=True, related_name='trainers', to='trainersdb.timeslot'),
        ),
        migrations.RunPython(migrate_timeslots_data),
    ]
